<?xml version="1.0" encoding="UTF-8"?>
<!--
  ! CCPL HEADER START
  !
  ! This work is licensed under the Creative Commons
  ! Attribution-NonCommercial-NoDerivs 3.0 Unported License.
  ! To view a copy of this license, visit
  ! http://creativecommons.org/licenses/by-nc-nd/3.0/
  ! or send a letter to Creative Commons, 444 Castro Street,
  ! Suite 900, Mountain View, California, 94041, USA.
  !
  ! You can also obtain a copy of the license at
  ! src/main/resources/legal-notices/CC-BY-NC-ND.txt.
  ! See the License for the specific language governing permissions
  ! and limitations under the License.
  !
  ! If applicable, add the following below this CCPL HEADER, with the fields
  ! enclosed by brackets "[]" replaced with your own identifying information:
  !      Portions Copyright [yyyy] [name of copyright owner]
  !
  ! CCPL HEADER END
  !
  !      Copyright 2011-2015 ForgeRock AS.
  !    
-->
<section xml:id='sec-rest-authz-policy'
         xmlns='http://docbook.org/ns/docbook'
         version='5.0' xml:lang='en'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
         xsi:schemaLocation='http://docbook.org/ns/docbook
                             http://docbook.org/xml/5.0/xsd/docbook.xsd'
         xmlns:xlink='http://www.w3.org/1999/xlink'
         xmlns:xinclude='http://www.w3.org/2001/XInclude'>

 <title>RESTful Authorization and Policy Management Services</title>

 <indexterm><primary>REST API</primary></indexterm>

 <para>This section shows how to use the OpenAM RESTful interfaces for
  authorization and policy management.
 </para>

 <section xml:id="rest-api-authz">
  <title>About the REST Policy Endpoints</title>
  <indexterm>
   <primary>Policy</primary>
   <secondary>REST API</secondary>
  </indexterm>

  <para>
   OpenAM provides REST APIs both for requesting policy decisions,
   and also for administering policy definitions.
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Under
     <literal>/json{/<replaceable>realm</replaceable>}/resourcetypes</literal>,
     you find a JSON-based API for managing resource types.
    </para>
   </listitem>
   <listitem>
    <para>
     Under
     <literal>/json{/<replaceable>realm</replaceable>}/applications</literal>
     and <literal>/json/applicationtypes</literal>
     you find JSON-based APIs
     for administering applications and reading application types.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json{/<replaceable>realm</replaceable>}/policies</literal>,
     you find a JSON-based API for policy management and evaluation.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/conditiontypes</literal> you find a JSON-based API
     for viewing what types of conditions you can use when defining policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/subjecttypes</literal> you find a JSON-based API
     for viewing what types of subjects you can use when defining policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/subjectattributes</literal> you find a JSON-based API
     for viewing subjects' attributes you can use when defining response
     attributes in policies.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/json/decisioncombiners</literal> you find a JSON-based API
     for viewing implementations you can use when defining policies
     to specify how to combine results when multiple policies apply.
    </para>
   </listitem>
   <listitem>
    <para>
     Under <literal>/identity/authorize</literal>
     and <literal>/ws/1/entitlement/</literal>,
     you find the backwards-compatible, legacy APIs.
     See <link xlink:show="new"
               xlink:href="dev-guide#deprecated-apis-policy"
               xlink:role="http://docbook.org/xlink/role/olink">Deprecated
     Authorization and Policy Management APIs</link>.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="rest-api-authz-policy-decisions">
  <title>Requesting Policy Decisions</title>

  <para>
   You can request policy decisions from OpenAM
   by using the REST APIs described in this section.
   OpenAM evaluates requests
   based on the context and the policies configured,
   and returns decisions that indicate what actions are allowed or denied,
   as well as any attributes or advice
   for the resources specified.
  </para>

  <para>
   To request decisions for specific resources,
   see <xref linkend="rest-api-authz-policy-decision-concrete" />.
  </para>

  <para>
   To request decisions for a resource and all resources beneath it,
   see <xref linkend="rest-api-authz-policy-decision-subtree" />.
  </para>

  <section xml:id="rest-api-authz-policy-decision-concrete">
   <title>Requesting Policy Decisions For Specific Resources</title>

   <para>
    This section shows how you can request a policy decision over REST
    for specific resources.
   </para>

   <para>
    To request policy decisions for specific resources,
    perform an HTTP POST using the evaluation action
    to the appropriate path under the URI where OpenAM is deployed,
    <literal>/json{/<replaceable>realm</replaceable>}{/<replaceable>subrealm</replaceable>}/policies?_action=evaluate</literal>,
    where <replaceable>realm</replaceable> and
    <replaceable>subrealm</replaceable>
    optionally specifies the realm.
    The payload for the HTTP POST is a JSON object
    that specifies at least the resources,
    and takes the following form.
   </para>

   <programlisting language="javascript">{
    "resources": [
        "resource1",
        "resource2",
        ...,
        "resourceN"
    ],
    "application": "defaults to iPlanetAMWebAgentService if not specified",
    "subject": {
        "ssoToken": "SSO token ID string",
        "jwt": "JSON Web Token string",
        "claims": {
            "key": "value",
            ...
        }
    },
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}</programlisting>

   <variablelist>
    <para>
     The values for the fields shown above are explained below:
    </para>

    <varlistentry>
     <term><literal>"resources"</literal></term>
     <listitem>
      <para>
       This required field specifies the list of resources
       for which to return decisions.
      </para>

      <para>
       For example, when using the default application,
       <literal>"iPlanetAMWebAgentService"</literal>,
       you can request decisions for resource URLs.
      </para>

      <programlisting language="javascript">{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ]
}</programlisting>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"application"</literal></term>
     <listitem>
      <para>
       This field holds the name of the application,
       and defaults to <literal>"iPlanetAMWebAgentService"</literal>
       if not specified.
      </para>

      <para>
       For more on applications,
       see <xref linkend="rest-api-authz-applications" />.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"subject"</literal></term>
     <listitem>
      <para>
      </para>

      <variablelist>
       <para>
        This optional field holds an object that represents the subject.
        You can specify one or more of the following keys.
        If you specify multiple keys,
        the subject can have multiple associated principals,
        and you can use subject conditions corresponding to any type in the request.
       </para>

       <varlistentry>
        <term><literal>"ssoToken"</literal></term>
        <listitem>
         <para>
          The value is the SSO token ID string for the subject,
          returned for example on successful authentication as described in
          <link
           xlink:show="new"
           xlink:href="dev-guide#rest-api-auth-json"
           xlink:role="http://docbook.org/xlink/role/olink"
          ><citetitle>REST APIs for Authentication &amp; Logout</citetitle></link>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>"jwt"</literal></term>
        <listitem>
         <para>
          The value is a JWT string.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>"claims"</literal></term>
        <listitem>
         <para>
          The value is an object (map) of JWT claims to their values.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      <para>
       If you do not specify the subject,
       OpenAM uses the SSO token ID of the subject making the request.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"environment"</literal></term>
     <listitem>
      <para>
       This optional field holds a map of keys to lists of values.
      </para>

      <para>
       If you do not specify the environment, the default is an empty map.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The example below requests policy decisions for two URL resources.
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation.
   </para>

   <screen>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "resources": [
        "http://www.example.com/index.html",
        "http://www.example.com/do?action=run"
    ],
    "application": "iPlanetAMWebAgentService"
 }' \
 https://openam.example.com:8443/openam/json/policies?_action=evaluate</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com/do?action=run",
  "actions" : {
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "3" ]
  }
}, {
  "resource" : "http://www.example.com/index.html",
  "actions" : {
    "POST" : false,
    "GET" : true
  },
  "attributes" : {
    "cn" : [ "demo" ]
  },
  "advices" : {
  }
} ]</computeroutput>
     </screen>

   <variablelist>
    <para>
     In the JSON list of decisions returned for each resource,
     OpenAM includes these fields.
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       A resource specified in the request.
      </para>

      <para>
       The decisions returned are not guaranteed
       to be in the same order as the resources were requested.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"actions"</literal></term>
     <listitem>
      <para>
       A map of action name keys
       to Boolean values that indicate whether
       the action is allowed (<literal>true</literal>)
       or denied (<literal>false</literal>)
       for the specified resource.
      </para>

      <para>
       In the example,
       for resource <literal>http://www.example.com:80/index.html</literal>
       HTTP GET is allowed, whereas HTTP POST is denied.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"attributes"</literal></term>
     <listitem>
      <para>
       A map of attribute names to their values,
       if any response attributes are returned
       according to applicable policies.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/index.html</literal>
       causes that the value of the subject's "cn" profile attribute
       to be returned.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"advices"</literal></term>
     <listitem>
      <para>
       A map of advice names to their values,
       if any advice is returned according to applicable policies.
      </para>

      <para>
       The <literal>"advices"</literal> field can provide hints
       regarding what OpenAM needs to take the authorization decision.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/do?action=run</literal>
       requests that the subject be authenticated
       at an authentication level of at least 3.
      </para>

      <programlisting language="javascript">{
    "advices": {
        "AuthLevelConditionAdvice": [
            "3"
        ]
    }
}</programlisting>

      <para>
       See <xref linkend="rest-api-authz-policy-decision-advice" /> for details.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policy-decision-advice">
   <title>Policy Decision Advice</title>

   <para>
    When OpenAM returns a policy decision,
    the JSON for the decision can include an "advices" field.
    This field contains hints for the policy enforcement point.
   </para>

   <programlisting language="javascript">{
    "advices": {
        "<replaceable>type</replaceable>": [
            "<replaceable>advice</replaceable>"
        ]
    }
}</programlisting>

   <para>
    The "advices" returned depend on policy conditions. For more
    information about OpenAM policy conditions, see
    <xref linkend="rest-api-authz-policies" />.
   </para>
   <para>
    This section shows examples of the different types
    of policy decision advice
    and the conditions that cause OpenAM to return the advice.
   </para>

   <para>
    <literal>"AuthLevel"</literal>
    and
    <literal>"LEAuthLevel"</literal>
    condition failures can result in advice
    showing the expected or maximum possible authentication level.
    For example, failure against the following condition:
   </para>

   <programlisting language="javascript">{
    "type": "AuthLevel",
    "authLevel": 2
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthLevelConditionAdvice": [
        "2"
    ]
}</programlisting>

   <para>
    An <literal>"AuthScheme"</literal>
    condition failure can result in advice
    showing one or more required authentication modules.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">{
    "type": "AuthScheme",
    "authScheme": [
        "HOTP"
    ],
    "applicationName": "iPlanetAMWebAgentService",
    "applicationIdleTimeout": 10
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthSchemeConditionAdvice": [
        "HOTP"
    ]
}</programlisting>

   <para>
    An
    <literal>"AuthenticateToRealm"</literal>
    condition failure can result in advice
    showing the name of the realm to which authentication
    is required. For example, failure against the following condition:
   </para>
   <programlisting language="javascript">{
    "type": "AuthenticateToRealm",
    "authenticateToRealm": "MyRealm"
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthenticateToRealmConditionAdvice": [
        "/myRealm"
    ]
}</programlisting>

   <para>
    An
    <literal>"AuthenticateToService"</literal>
    condition failure can result in advice
    showing the name of the required authentication chain.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">{
    "type": "AuthenticateToService",
    "authenticateToService": "MyAuthnChain"
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthenticateToServiceConditionAdvice": [
        "MyAuthnChain"
    ]
}</programlisting>

   <para>
    A
    <literal>"ResourceEnvIP"</literal>
    condition failure can result in advice
    showing that indicates corrective action to be taken
    to resolve the problem. The advice varies, depending on what the condition
    tests. For example, failure against the following condition:
   </para>
   <programlisting language="javascript">{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.0.0.12] THEN authlevel=4"
    ]
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthLevelConditionAdvice": [
        "4"
    ]
}</programlisting>

   <para>
    Failure against a different type of
    <literal>"ResourceEnvIP"</literal>
    condition such as the following:
   </para>
   <programlisting language="javascript">{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.0.0.11] THEN service=MyAuthnChain"
    ]
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "AuthenticateToServiceConditionAdvice": [
        "MyAuthnChain"
    ]
}</programlisting>

   <para>
    A
    <literal>"Session"</literal>
    condition failure can result in advice
    showing that access has been denied because
    the user's stateful or stateless session has been active
    longer than allowed by the condition.
    The advice will also show if the user's session
    was terminated and reauthentication is required.
    For example, failure against the following condition:
   </para>
   <programlisting language="javascript">{
    "type": "Session",
    "maxSessionTime": "10",
    "terminateSession": false
}</programlisting>

   <para>
    Leads to this advice:
   </para>

   <programlisting language="javascript">{
    "SessionConditionAdvice": [
        "deny"
    ]
}</programlisting>

   <para>
    When policy evaluation denials occur against the following conditions,
    OpenAM does not return any advice:
    <itemizedlist>
     <listitem>
      <para>
       <literal>IPv4</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>IPv6</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>LDAPFilter</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>OAuth2Scope</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>SessionProperty</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>SimpleTime</literal>
      </para>
     </listitem>
    </itemizedlist>
   </para>

  </section>

  <section xml:id="rest-api-authz-policy-decision-subtree">
   <title>Requesting Policy Decisions For a Tree of Resources</title>

   <para>
    This section shows how you can request policy decisions over REST
    for a resource and all other resources in the subtree beneath it.
   </para>

   <para>
    To request policy decisions for a tree of resources,
    perform an HTTP POST using the evaluation action to the appropriate path
    under the URI where OpenAM is deployed,
    <literal>/json{/<replaceable>realm</replaceable>}/policies?_action=evaluateTree</literal>,
    where <replaceable>realm</replaceable> optionally specifies the realm.
    The payload for the HTTP POST is a JSON object that specifies
    at least the root resource, and takes the following form.
   </para>

   <programlisting language="javascript">{
    "resource": "resource string",
    "application": "defaults to iPlanetAMWebAgentService if not specified",
    "subject": {
        "ssoToken": "SSO token ID string",
        "jwt": "JSON Web Token string",
        "claims": {
            "key": "value",
            ...
        }
    },
    "environment": {
        "optional key1": [
            "value",
            "another value",
            ...
        ],
        "optional key2": [
            "value",
            "another value",
            ...
        ],
        ...
    }
}</programlisting>

   <variablelist>
    <para>
     The values for the fields shown above are explained below:
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       This required field specifies the root resource
       for the decisions to return.
      </para>

      <para>
       For example, when using the default application,
       <literal>"iPlanetAMWebAgentService"</literal>,
       you can request decisions for resource URLs.
      </para>

      <programlisting language="javascript">{
    "resource": "http://www.example.com/"
}</programlisting>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"application"</literal></term>
     <listitem>
      <para>
       This field holds the name of the application,
       and defaults to <literal>"iPlanetAMWebAgentService"</literal>
       if not specified.
      </para>

      <para>
       For more on applications,
       see <xref linkend="rest-api-authz-applications" />.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"subject"</literal></term>
     <listitem>
      <para>
      </para>

      <variablelist>
       <para>
        This optional field holds an object that represents the subject.
        You can specify one or more of the following keys.
        If you specify multiple keys,
        the subject can have multiple associated principals,
        and you can use subject conditions corresponding to any type in the request.
       </para>

       <varlistentry>
        <term><literal>"ssoToken"</literal></term>
        <listitem>
         <para>
          The value is the SSO token ID string for the subject,
          returned for example on successful authentication as described in,
          <link
           xlink:show="new"
           xlink:href="dev-guide#rest-api-auth-json"
           xlink:role="http://docbook.org/xlink/role/olink"
          ><citetitle>REST APIs for Authentication &amp; Logout</citetitle></link>.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>"jwt"</literal></term>
        <listitem>
         <para>
          The value is a JWT string.
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>"claims"</literal></term>
        <listitem>
         <para>
          The value is an object (map) of JWT claims to their values.
         </para>
        </listitem>
       </varlistentry>

      </variablelist>

      <para>
       If you do not specify the subject,
       OpenAM uses the SSO token ID of the subject making the request.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"environment"</literal></term>
     <listitem>
      <para>
       This optional field holds a map of keys to lists of values.
      </para>

      <para>
       If you do not specify the environment, the default is an empty map.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    The example below requests policy decisions
    for <literal>http://www.example.com/</literal>.
    The <literal>iPlanetDirectoryPro</literal> header sets the SSO token
    for a user who has access to perform the operation,
    and the subject takes the SSO token of the user
    who wants to access a resource.
   </para>

   <screen>$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5...NDU1*" \
 --header "Content-Type: application/json" \
 --data '{
    "resource": "http://www.example.com/",
    "subject": { "ssoToken": "AQIC5...zE4*" }
 }' \
 https://openam.example.com:8443/openam/json/policies?_action=evaluateTree</userinput>
<computeroutput>[ {
  "resource" : "http://www.example.com/",
  "actions" : {
    "GET" : true,
    "OPTIONS" : true,
    "HEAD" : true
  },
  "attributes" : {
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com/*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : true,
    "DELETE" : true,
    "OPTIONS" : true,
    "HEAD" : true,
    "PUT" : true
  },
  "attributes" : {
    "myStaticAttr" : [ "myStaticValue" ]
  },
  "advices" : {
  }
}, {
  "resource" : "http://www.example.com/*?*",
  "actions" : {
    "POST" : false,
    "PATCH" : false,
    "GET" : false,
    "DELETE" : false,
    "OPTIONS" : true,
    "HEAD" : false,
    "PUT" : false
  },
  "attributes" : {
  },
  "advices" : {
    "AuthLevelConditionAdvice" : [ "3" ]
  }
} ]</computeroutput></screen>

   <para>
    Notice that OpenAM returns decisions not only for the specified resource,
    but also for matching resource names
    in the tree whose root is the specified resource.
   </para>

   <variablelist>
    <para>
     In the JSON list of decisions returned for each resource,
     OpenAM includes these fields.
    </para>

    <varlistentry>
     <term><literal>"resource"</literal></term>
     <listitem>
      <para>
       A resource name whose root is the resource specified in the request.
      </para>

      <para>
       The decisions returned are not guaranteed
       to be in the same order as the resources were requested.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"actions"</literal></term>
     <listitem>
      <para>
       A map of action name keys
       to Boolean values that indicate whether
       the action is allowed (<literal>true</literal>)
       or denied (<literal>false</literal>)
       for the specified resource.
      </para>

      <para>
       In the example, for matching resources with a query string
       only HTTP OPTIONS is allowed according to the policies configured.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"attributes"</literal></term>
     <listitem>
      <para>
       A map of attribute names to their values,
       if any response attributes are returned
       according to applicable policies.
      </para>

      <para>
       In the example, the policy that applies
       to <literal>http://www.example.com:80/*</literal>
       causes a static attribute to be returned.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>"advices"</literal></term>
     <listitem>
      <para>
       A map of advice names to their values,
       if any advice is returned according to applicable policies.
      </para>

      <para>
       The <literal>"advices"</literal> field can provide hints
       regarding what OpenAM needs to take the authorization decision.
      </para>

      <para>
       In the example, the policy that applies
       to resources with a query string
       requests that the subject be authenticated
       at an authentication level of at least 3.
      </para>
      <para>
       Notice that with the <literal>"advices"</literal> field
       present, no <literal>"advices"</literal> appear in the
       JSON response.
      </para>

      <programlisting language="javascript">{
    "advices": {
        "AuthLevelConditionAdvice": [ "3" ]
    }
}</programlisting>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

 </section>

 <section xml:id="rest-api-authz-resource-types">
  <title>Managing Resource Types</title>

  <indexterm>
   <primary>Resource Types</primary>
  </indexterm>

  <para>
   This section describes the process of using the OpenAM REST API for managing
   resource types, which define a template for the resources that <link
   linkend="rest-api-authz-policies">policies</link> apply
   to, and the actions associated with those resources.
  </para>

  <para>For information on creating resource types by using the OpenAM
  console, see <link xlink:show="new"
                 xlink:href="admin-guide#what-is-authz-policies"
      xlink:role="http://docbook.org/xlink/role/olink">Configuring Resource
  Types, Applications, and Policies</link> in the <citetitle>OpenAM
  Administration Guide</citetitle>.</para>

  <itemizedlist>
   <para>OpenAM provides the <literal>resourcetypes</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-resource-types-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-resource-types-read" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-resource-types-create" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-resource-types-update" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-resource-types-delete"  /></para>
   </listitem>
  </itemizedlist>

  <para>
   Resource types are realm specific, hence the URI for the resource
   types API can contain a realm component, such as
   <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes</literal>.
   If the realm is not specified in the URI, the top level realm is
   used.</para>

  <para>
   Resource types are represented in JSON and take the following form.
   Resource types are built from standard JSON objects and values
   (strings, numbers, objects, sets, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>). Each resource type
   has a unique, system-generated UUID, which must be used when modifying
   existing resource types. Renaming a resource type will not affect the UUID.
  </para>

<programlisting language="json">{
    "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e2",
    "name": "URL",
    "description": "The built-in URL Resource Type available to OpenAM Policies.",
    "patterns": [
        "*://*:*/*?*",
        "*://*:*/*"
    ],
    "actions": {
        "POST": true,
        "PATCH": true,
        "GET": true,
        "DELETE": true,
        "OPTIONS": true,
        "HEAD": true,
        "PUT": true
    },
    "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1422892465848,
    "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1422892465848
}</programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the description are explained below:
   </para>

   <varlistentry>
    <term><literal>"uuid"</literal></term>
    <listitem>
     <para>
      String matching the unique identifier OpenAM generated for the resource
      type when created.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      The name provided for the resource type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      An optional text string to help identify the resource type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"patterns"</literal></term>
    <listitem>
     <para>
      An array of resource patterns specifying individual URLs or resource
      names to protect.
     </para>
     <para>For more information on patterns in resource types and
      policies, see
      <link
      xlink:show="new"
      xlink:href="admin-guide#policy-patterns-wildcards"
      xlink:role="http://docbook.org/xlink/role/olink"
      ><citetitle>Specifying Resource Patterns with Wildcards</citetitle></link></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actions"</literal></term>
    <listitem>
     <para>
      Set of string action names,
      each set to a boolean indicating whether the action is allowed.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"createdBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      created the resource type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"creationDate"</literal></term>
    <listitem>
     <para>
      An integer containing the creation date and time, in ISO 8601 format.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"lastModifiedBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      most recently updated the resource type.
     </para>
     <para>If the resource type has not been modified since it was
      created, this will be the same value as
      <literal>createdBy</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"lastModifiedDate"</literal></term>
    <listitem>
     <para>
      An string containing the last modified date and time, in ISO 8601 format.
     </para>
     <para>If the resource type has not been modified since it was
      created, this will be the same value as <literal>creationDate</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="rest-api-authz-resource-types-query">
   <title>Querying Resource Types</title>

   <para>
    To list all the resource types in a realm, perform an HTTP GET to the
    <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes</literal>
    endpoint, with a <literal>_queryFilter</literal> parameter
    set to <literal>true</literal>.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM returns
    resource types in the top level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/myrealm/resourcetypes?_queryFilter=true</userinput>
<computeroutput>{
    "result": [
    {
        "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e3",
        "name": "LIGHTS",
        "description": "",
        "patterns": [
            "light://*/*"
        ],
        "actions": {
            "switch_off": true,
            "switch_on": true
        },
        "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "creationDate": 1431013059131,
        "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "lastModifiedDate": 1431013069803
    }
    ],
    "resultCount": 1,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput></screen>

   <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>

   <table>
    <title>Supported <literal>_queryFilter</literal> Fields and
     Operators</title>
    <tgroup cols="2">
    <thead>
     <row>
      <entry>Field</entry>
      <entry>Supported Operators</entry>
     </row></thead>
    <tbody>
     <row>
      <entry><literal>uuid</literal></entry>
      <entry>
       Equals (<literal>eq</literal>),
       Contains (<literal>co</literal>),
       Starts with (<literal>sw</literal>)
      </entry>
     </row>
     <row>
      <entry><literal>name</literal></entry>
      <entry>
       Equals (<literal>eq</literal>),
       Contains (<literal>co</literal>),
       Starts with (<literal>sw</literal>)
      </entry>
     </row>
     <row>
      <entry><literal>description</literal></entry>
      <entry>
       Equals (<literal>eq</literal>),
       Contains (<literal>co</literal>),
       Starts with (<literal>sw</literal>)
      </entry>
     </row>
     <row>
      <entry><literal>patterns</literal></entry>
      <entry>
       Equals (<literal>eq</literal>),
       Contains (<literal>co</literal>),
       Starts with (<literal>sw</literal>)
      </entry>
     </row>
     <row>
      <entry><literal>actions</literal></entry>
      <entry>
       Equals (<literal>eq</literal>),
       Contains (<literal>co</literal>),
       Starts with (<literal>sw</literal>)
      </entry>
     </row>
    </tbody>
    </tgroup>
   </table>
  </section>

  <section xml:id="rest-api-authz-resource-types-read">
   <title>Reading a Specific Resource Type</title>

   <para>
    To read an individual resource types in a realm, perform an HTTP
    GET to the <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes</literal>
    endpoint, and specify the UUID in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/myrealm/resourcetypes/12345a67-8f0b-123c-45de-6fab78cd01e3</userinput>
<computeroutput>{
    "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e3",
    "name": "LIGHTS",
    "description": "",
    "patterns": [
        "light://*/*"
    ],
    "actions": {
        "switch_off": true,
        "switch_on": true
    },
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1431013059131,
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1431013069803
}</computeroutput></screen>
  </section>

  <section xml:id="rest-api-authz-resource-types-create">
   <title>Creating a Resource Type</title>

   <para>
    To create a resource type in a realm, perform an HTTP POST to the
    <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes</literal>
    endpoint, with an <literal>_action</literal> parameter
    set to <literal>create</literal>. Include a JSON representation of the
    resource type in the POST data.
   </para>

   <note><para>If the realm is not specified in the URL, OpenAM creates the
    resource type in the top level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>


<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
--request POST \
--data '{
    "name": "My Resource Type",
    "actions": {
        "LEFT": true,
        "RIGHT": true,
        "UP": true,
        "DOWN": true
    },
    "patterns": [
        "http://device/location/*"
    ]
}' \
https://openam.example.com:8443/openam/json/myrealm/resourcetypes/?_action=create</userinput>
<computeroutput>{
    "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
    "name": "My Resource Type",
    "description": null,
    "patterns": [
        "http://device/location/*"
    ],
    "actions": {
        "RIGHT": true,
        "DOWN": true,
        "UP": true,
        "LEFT": true
    },
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1431099940616,
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1431099940616
}</computeroutput></screen>
</section>

  <section xml:id="rest-api-authz-resource-types-update">
   <title>Updating a Resource Type</title>

   <para>
    To update an individual resource type in a realm, perform an HTTP
    PUT to the <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes
   </literal> endpoint, and specify the UUID in both the URL and the PUT body.
    Include a JSON representation of the updated resource type in the PUT
    data, alongside the UUID.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>

<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
--request PUT \
--data '{
    "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
    "name": "My Updated Resource Type",
    "actions": {
        "LEFT": false,
        "RIGHT": false,
        "UP": false,
        "DOWN": false
    },
    "patterns": [
        "http://device/location/*"
    ]
}' \
https://openam.example.com:8443/openam/json/myrealm/resourcetypes/12345a67-8f0b-123c-45de-6fab78cd01e4</userinput>
<computeroutput>{
    "uuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
    "name": "My Updated Resource Type",
    "description": null,
    "patterns": [
        "http://device/location/*"
    ],
    "actions": {
        "RIGHT": false,
        "DOWN": false,
        "UP": false,
        "LEFT": false
    },
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": 1431099940616,
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": 1431101016427
}</computeroutput></screen>
  </section>

  <section xml:id="rest-api-authz-resource-types-delete">
   <title>Deleting a Specific Resource Type</title>

   <para>
    To delete an individual resource types in a realm, perform an HTTP
    DELETE to the <literal>/json{<replaceable>/realm</replaceable>}/resourcetypes</literal>
    endpoint, and specify the UUID in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>$ <userinput>curl \
--request DELETE \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/myrealm/resourcetypes/12345a67-8f0b-123c-45de-6fab78cd01e4</userinput>
<computeroutput>{}</computeroutput></screen>

   <para>You can only delete resource types that are not being used by
    applications or policies. Trying to delete a resource type that is in
   use will return an HTTP 409 Conflict status code, with a message such as:
   </para>
<screen><computeroutput>{
    "code": 409,
    "reason": "Conflict",
    "message": "Unable to remove resource type 12345a67-8f0b-123c-45de-6fab78cd01e4 because it is
                referenced in the policy model."
}</computeroutput></screen>
   <para>Remove the resource type from any associated applications or
    policies to be able to delete it.</para>
  </section>

 </section>

  <section xml:id="rest-api-authz-application-types">
  <title>Managing Application Types</title>

  <para>
   Application types act as templates for creating applications. The default
   application type that represents web resources
   is <literal>iPlanetAMWebAgentService</literal>,
   which defines resources as URL patterns and actions as HTTP methods.
   OpenAM policy agents use a default application based on this type,
   which is also called <literal>iPlanetAMWebAgentService</literal>.
   This is the application used for policies that you edit through OpenAM console.
  </para>

   <itemizedlist>
   <para>OpenAM provides the <literal>applicationtypes</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-application-types-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-application-types-read" /></para>
   </listitem>
  </itemizedlist>

  <para>
   Applications types are server-wide, and do not differ by realm.
   Hence the URI for the application types API
   does not contain a realm component,
   but is <literal>/json/applicationtypes</literal>.
  </para>

  <para>
   Application type resources are represented in JSON and take the following form.
   Application type resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

<programlisting language="javascript">{
    "name": "iPlanetAMWebAgentService",
    "actions": {
        "POST": true,
        "PATCH": true,
        "GET": true,
        "DELETE": true,
        "OPTIONS": true,
        "PUT": true,
        "HEAD": true
    },
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "saveIndex": "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
    "searchIndex": "org.forgerock.openam.entitlement.indextree.TreeSearchIndex",
    "applicationClassName": "com.sun.identity.entitlement.Application"
}</programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the description are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      The name provided for the application type.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actions"</literal></term>
    <listitem>
     <para>
      Set of string action names, each set to a boolean indicating whether the
      action is allowed.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceComparator"</literal></term>
    <listitem>
     <para>
      Class name of the resource comparator implementation used
      in the context of this application.
     </para>

     <para>
      The following implementations are available:
     </para>

     <simplelist>
      <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
     </simplelist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"saveIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for creating indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"searchIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for searching indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationClassName"</literal></term>
    <listitem>
     <para>
      Class name of the application implementation,
      such as <literal>"com.sun.identity.entitlement.Application"</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <section xml:id="rest-api-authz-application-types-query">
   <title>Querying Application Types</title>

   <para>
    To list all application types, perform an HTTP GET to the
    <literal>/json/applicationtypes</literal> endpoint,
    with a <literal>_queryFilter</literal> parameter set to <literal>true</literal>.
   </para>

   <para>The <literal>iPlanetDirectoryPro</literal> header is required and should
   contain the SSO token of an Administrator user who has access to perform the
    operation. </para>

<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/applicationtypes?_queryFilter=true</userinput>
<computeroutput>{
    "result" : [ ... application types ... ],
    "resultCount" : 8,
    "pagedResultsCookie" : null,
    "remainingPagedResults" : -1
}</computeroutput></screen>

   <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>
  </section>

  <section xml:id="rest-api-authz-application-types-read">
   <title>Reading a Specific Application Type</title>

   <para>
    To read an individual application type, perform an HTTP GET to the
    <literal>/json/applicationtypes</literal> endpoint, and specify the
    application type name in the URL.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform the
    operation.
   </para>

   <screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/applicationtypes/iPlanetAMWebAgentService</userinput>
<computeroutput>{
    "name": "iPlanetAMWebAgentService",
    "actions": {
        "POST": true,
        "PATCH": true,
        "GET": true,
        "DELETE": true,
        "OPTIONS": true,
        "PUT": true,
        "HEAD": true
    },
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "saveIndex": "org.forgerock.openam.entitlement.indextree.TreeSaveIndex",
    "searchIndex": "org.forgerock.openam.entitlement.indextree.TreeSearchIndex",
    "applicationClassName": "com.sun.identity.entitlement.Application"
}</computeroutput></screen>
  </section>


 </section>

 <section xml:id="rest-api-authz-applications">
  <title>Managing Applications</title>

    <para>
   This section describes the process of using the OpenAM REST API for managing
   applications.
  </para>

  <para>
   Application definitions set constraints
   for defining <link linkend="rest-api-authz-policies">policies</link>.
   The default built-in application is the <literal>iPlanetAMWebAgentService</literal>,
   which OpenAM policy agents use to allow policy management through the console.
  </para>

  <para>For information on creating applications by using the OpenAM
  console, see <link xlink:show="new"
                 xlink:href="admin-guide#what-is-authz-policies"
      xlink:role="http://docbook.org/xlink/role/olink">Configuring Resource
  Types, Applications, and Policies</link> in the <citetitle>OpenAM
  Administration Guide</citetitle>.</para>

  <itemizedlist>
   <para>OpenAM provides the <literal>applications</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-applications-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-applications-read" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-applications-create" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-applications-update" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-applications-delete"  /></para>
   </listitem>
  </itemizedlist>

  <para>
   Applications are realm specific, hence the URI for the applications API can
   contain a realm component, such as
   <literal>/json{<replaceable>/realm</replaceable>}/applications</literal>.
   If the realm is not specified in the URI, the top level realm is
   used.</para>
  <para>
   Applications are represented in JSON and take the following form.
   Application resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

  <programlisting language="javascript">{
    "creationDate": 1431351677264,
    "lastModifiedDate": 1431351677264,
    "conditions": [
        "AuthenticateToService",
        "Script",
        "AuthScheme",
        "IPv6",
        "SimpleTime",
        "OAuth2Scope",
        "IPv4",
        "AuthenticateToRealm",
        "OR",
        "AMIdentityMembership",
        "LDAPFilter",
        "AuthLevel",
        "SessionProperty",
        "LEAuthLevel",
        "Session",
        "NOT",
        "AND",
        "ResourceEnvIP"
    ],
    "applicationType": "iPlanetAMWebAgentService",
    "subjects": [
        "JwtClaim",
        "AuthenticatedUsers",
        "Identity",
        "NOT",
        "AND",
        "NONE",
        "OR"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "resourceComparator": null,
    "resourceTypeUuids": [
        "12345a67-8f0b-123c-45de-6fab78cd01e4"
    ],
    "attributeNames": [ ],
    "editable": true,
    "createdBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedBy": "id=dsameuser,ou=user,dc=openam,dc=forgerock,dc=org",
    "description": "The built-in Application used by OpenAM Policy Agents.",
    "realm": "/",
    "name": "iPlanetAMWebAgentService"
}</programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the description are explained below:
   </para>
     <varlistentry>
    <term><literal>"conditions"</literal></term>
    <listitem>
     <para>
      Condition types allowed in the context of this application.
     </para>
     <para>
      For information on condition types,
      see <xref linkend="rest-api-authz-policies" /> and
      <xref linkend="rest-api-authz-condition-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationType"</literal></term>
    <listitem>
     <para>
      Name of the application type used as a template for this application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"subjects"</literal></term>
    <listitem>
     <para>
      Subject types allowed in the context of this application.
     </para>
     <para>
      For information on subject types,
      see <xref linkend="rest-api-authz-policies" /> and
      <xref linkend="rest-api-authz-subject-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"entitlementCombiner"</literal></term>
    <listitem>
     <para>
      Name of the decision combiner, such as <literal>"DenyOverride"</literal>.
     </para>

     <para>
      For more on decision combiners,
      see <xref linkend="rest-api-authz-decision-combiners" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"saveIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for creating indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameIndexGenerator"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"searchIndex"</literal></term>
    <listitem>
     <para>
      Class name of the implementation for searching indexes for resource names,
      such as <literal>"com.sun.identity.entitlement.util.ResourceNameSplitter"</literal>
      for URL resource names.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceComparator"</literal></term>
    <listitem>
     <para>
      Class name of the resource comparator implementation used
      in the context of this application.
     </para>

     <para>
      The following implementations are available:
     </para>

     <simplelist>
      <member><literal>"com.sun.identity.entitlement.ExactMatchResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.PrefixResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.RegExResourceName"</literal></member>
      <member><literal>"com.sun.identity.entitlement.URLResourceName"</literal></member>
     </simplelist>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resourceTypeUuids"</literal></term>
    <listitem>
     <para>
      A list of the UUIDs of the resource types associated with the
      application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"attributeNames"</literal></term>
    <listitem>
     <para>
      A list of attribute names such as
      <literal>cn</literal>.
      The list is used to aid policy indexing and lookup.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      String describing the application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"realm"</literal></term>
    <listitem>
     <para>
      Name of the realm where this application is defined. You must specify the
      realm in the application resource JSON even though it can be derived from
      the URL that is used when creating the application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the application by HTTP PUT
      or in the body when creating the application by HTTP POST.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"createdBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      created the application.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"creationDate"</literal></term>
    <listitem>
     <para>
      An integer containing the creation date and time, in number of seconds
      since the Unix epoch (1970-01-01T00:00:00Z).
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"lastModifiedBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      most recently updated the application.
     </para>
     <para>If the application has not been modified since it was
      created, this will be the same value as
      <literal>createdBy</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"lastModifiedDate"</literal></term>
    <listitem>
     <para>
      An integer containing the last modified date and time, in number of
      seconds since the Unix epoch (1970-01-01T00:00:00Z).
     </para>
     <para>If the application has not been modified since it was
      created, this will be the same value as <literal>creationDate</literal>.
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

  <section xml:id="rest-api-authz-applications-query">
   <title>Querying Applications</title>

   <para>
    To list all the applications in a realm, perform an HTTP GET to the
    <literal>/json{<replaceable>/realm</replaceable>}/applications</literal>
    endpoint, with a <literal>_queryFilter</literal> parameter
    set to <literal>true</literal>.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM returns
    applications in the top level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>
$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/applications?_queryFilter=true
</userinput><computeroutput>{
    "result": [
        {
            "creationDate": 1431360678810,
            "lastModifiedDate": 1431360678810,
            "conditions": [
                "AuthenticateToService",
                "AuthScheme",
                "IPv6",
                "SimpleTime",
                "OAuth2Scope",
                "IPv4",
                "AuthenticateToRealm",
                "OR",
                "AMIdentityMembership",
                "LDAPFilter",
                "SessionProperty",
                "AuthLevel",
                "LEAuthLevel",
                "Session",
                "NOT",
                "AND",
                "ResourceEnvIP"
            ],
            "applicationType": "iPlanetAMWebAgentService",
            "subjects": [
                "JwtClaim",
                "AuthenticatedUsers",
                "Identity",
                "NOT",
                "AND",
                "OR"
            ],
            "entitlementCombiner": "DenyOverride",
            "saveIndex": null,
            "searchIndex": null,
            "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
            "resourceTypeUuids": [
                "12345a67-8f0b-123c-45de-6fab78cd01e2"
            ],
            "attributeNames": [ ],
            "editable": true,
            "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
            "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
            "description": "My example application.",
            "realm": "/",
            "name": "myapplication"
        }
    ],
    "resultCount": 1,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput>
   </screen>



    <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>

   <table>
    <title>Supported <literal>_queryFilter</literal> Fields and
     Operators</title>
    <tgroup cols="2">
    <thead>
     <row>
      <entry>Field</entry>
      <entry>Supported Operators</entry>
     </row></thead>
    <tbody>
     <row>
      <entry><para><literal>name</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>description</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>createdBy</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>creationDate</literal></para></entry>
      <entry>
       <para>
        Equals (<literal>eq</literal>),
        Greater than or equal to (<literal>ge</literal>),
        Greater than (<literal>gt</literal>),
        Less than or equal to (<literal>le</literal>),
        Less than (<literal>lt</literal>)
       </para>
      <note><para>The implementation of <literal>eq</literal> for this date
       field does not use regular expression pattern matching.</para></note></entry>
     </row>
     <row>
      <entry><para><literal>lastModifiedBy</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>lastModifiedDate</literal></para></entry>
      <entry><para>
        Equals (<literal>eq</literal>),
        Greater than or equal to (<literal>ge</literal>),
        Greater than (<literal>gt</literal>),
        Less than or equal to (<literal>le</literal>),
        Less than (<literal>lt</literal>)
       </para>
      <note><para>The implementation of <literal>eq</literal> for this date
       field does not use regular expression pattern matching.</para></note></entry>
     </row>
    </tbody>
    </tgroup>
   </table>

  </section>

  <section xml:id="rest-api-authz-applications-read">
   <title>Reading a Specific Application</title>

   <para>
    To read an individual application in a realm, perform an HTTP
    GET to the <literal>/json{<replaceable>/realm</replaceable>}/applications
   </literal> endpoint, and specify the application name in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>
$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/applications/myapplication</userinput>
<computeroutput>{
    "creationDate": 1431360678810,
    "lastModifiedDate": 1431360678810,
    "conditions": [
        "AuthenticateToService",
        "AuthScheme",
        "IPv6",
        "SimpleTime",
        "OAuth2Scope",
        "IPv4",
        "AuthenticateToRealm",
        "OR",
        "AMIdentityMembership",
        "LDAPFilter",
        "SessionProperty",
        "AuthLevel",
        "LEAuthLevel",
        "Session",
        "NOT",
        "AND",
        "ResourceEnvIP"
    ],
    "applicationType": "iPlanetAMWebAgentService",
    "subjects": [
        "JwtClaim",
        "AuthenticatedUsers",
        "Identity",
        "NOT",
        "AND",
        "OR"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "resourceTypeUuids": [
        "12345a67-8f0b-123c-45de-6fab78cd01e2"
    ],
    "attributeNames": [ ],
    "editable": true,
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "description": "My example application.",
    "realm": "/",
    "name": "myapplication"
}</computeroutput></screen>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-applications-create">
   <title>Creating Applications</title>

  <para>
    To create an application in a realm, perform an HTTP POST to the
    <literal>/json{<replaceable>/realm</replaceable>}/applications</literal>
    endpoint, with an <literal>_action</literal> parameter
    set to <literal>create</literal>. Include a JSON representation of the
    application in the POST data.
   </para>

   <note><para>If the realm is not specified in the URL, OpenAM creates the
    application in the top level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>

<screen>
$ <userinput>curl \
--request POST \
--header "iPlanetDirectoryPro: AQIC5..." \
--header "Content-Type: application/json" \
--data '{
    "name": "myapplication",
    "resourceTypeUuids": [
        "12345a67-8f0b-123c-45de-6fab78cd01e2"
    ],
    "realm": "/",
    "conditions": [
        "AND",
        "OR",
        "NOT",
        "AMIdentityMembership",
        "AuthLevel",
        "AuthScheme",
        "AuthenticateToRealm",
        "AuthenticateToService",
        "IPv4",
        "IPv6",
        "LDAPFilter",
        "LEAuthLevel",
        "OAuth2Scope",
        "ResourceEnvIP",
        "Session",
        "SessionProperty",
        "SimpleTime"
    ],
    "applicationType": "iPlanetAMWebAgentService",
    "description": "My example application.",
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "subjects": [
        "AND",
        "OR",
        "NOT",
        "AuthenticatedUsers",
        "Identity",
        "JwtClaim"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": []
}' \
https://openam.example.com:8443/openam/json/applications/?_action=create</userinput>
<computeroutput>{
    "creationDate": 1431360678810,
    "lastModifiedDate": 1431360678810,
    "conditions": [
        "AuthenticateToService",
        "AuthScheme",
        "IPv6",
        "SimpleTime",
        "OAuth2Scope",
        "IPv4",
        "AuthenticateToRealm",
        "OR",
        "AMIdentityMembership",
        "LDAPFilter",
        "SessionProperty",
        "AuthLevel",
        "LEAuthLevel",
        "Session",
        "NOT",
        "AND",
        "ResourceEnvIP"
    ],
    "applicationType": "iPlanetAMWebAgentService",
    "subjects": [
        "JwtClaim",
        "AuthenticatedUsers",
        "Identity",
        "NOT",
        "AND",
        "OR"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "resourceTypeUuids": [
        "12345a67-8f0b-123c-45de-6fab78cd01e2"
    ],
    "attributeNames": [ ],
    "editable": true,
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "description": "My example application.",
    "realm": "/",
    "name": "myapplication"
}</computeroutput></screen>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>


  </section>

  <section xml:id="rest-api-authz-applications-update">
   <title>Updating Applications</title>

   <para>
    To update an individual application in a realm, perform an HTTP
    PUT to the <literal>/json{<replaceable>/realm</replaceable>}/applications
   </literal> endpoint, and specify the application name in the URL. Include a
    JSON representation of the updated application in the PUT data.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>

<screen>
$ <userinput>curl \
--request PUT \
--header "iPlanetDirectoryPro: AQIC5..." \
--header "Content-Type: application/json" \
--data '{
    "name": "myupdatedapplication",
    "description": "My updated application - new name and fewer allowable conditions/subjects.",
    "conditions": [
        "NOT",
        "SimpleTime"
    ],
    "subjects": [
        "AND",
        "OR",
        "NOT",
        "AuthenticatedUsers",
        "Identity"
    ],
    "applicationType": "iPlanetAMWebAgentService",
    "entitlementCombiner": "DenyOverride",
    "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
    ]
}' \
https://openam.example.com:8443/openam/json/applications/myapplication</userinput>
<computeroutput>{
    "creationDate": 1431362370739,
    "lastModifiedDate": 1431362390817,
    "conditions": [
        "NOT",
        "SimpleTime"
    ],
    "resourceComparator": "com.sun.identity.entitlement.URLResourceName",
    "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2"
    ],
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "applicationType": "iPlanetAMWebAgentService",
    "subjects": [
        "AuthenticatedUsers",
        "Identity",
        "NOT",
        "AND",
        "OR"
    ],
    "entitlementCombiner": "DenyOverride",
    "saveIndex": null,
    "searchIndex": null,
    "attributeNames": [ ],
    "editable": true,
    "description": "My updated application - new name and fewer allowable conditions/subjects.",
    "realm": "/",
    "name": "myupdatedapplication"
}</computeroutput></screen>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-applications-delete">
   <title>Deleting Applications</title>

   <para>
    To delete an individual application in a realm, perform an HTTP
    DELETE to the <literal>/json{<replaceable>/realm</replaceable>}/applications
   </literal> endpoint, and specify the application name in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
    $ <userinput>curl \
    --request DELETE \
    --header "iPlanetDirectoryPro: AQIC5..." \
    https://openam.example.com:8443/openam/json/applications/myupdatedapplication</userinput>
    <computeroutput>{}</computeroutput></screen>
  </section>

 </section>

 <section xml:id="rest-api-authz-policies">
  <title>Managing Policies</title>

  <para>
   This section describes the process of using the OpenAM REST API for managing
   policies.
  </para>

  <para>For information on creating policies by using the OpenAM
  console, see <link xlink:show="new"
                 xlink:href="admin-guide#what-is-authz-policies"
      xlink:role="http://docbook.org/xlink/role/olink">Configuring Resource
  Types, Applications, and Policies</link> in the <citetitle>OpenAM
  Administration Guide</citetitle>.</para>

  <itemizedlist>
   <para>OpenAM provides the <literal>policies</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-policies-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-policies-read" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-policies-create" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-policies-update" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-policies-delete"  /></para>
   </listitem>
  </itemizedlist>

  <para>
   Policies are realm specific, hence the URI for the policies API can
   contain a realm component, such as
   <literal>/json{<replaceable>/realm</replaceable>}/policies</literal>.
   If the realm is not specified in the URI, the top level realm is
   used.</para>

  <para>
   Policy resources are represented in JSON and take the following form.
   Policy resources are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

  <programlisting language="javascript">{
    "name": "mypolicy",
    "active": true,
    "description": "My Policy.",
    "applicationName": "iPlanetAMWebAgentService",
    "actionValues": {
        "POST": true,
        "GET": true
    },
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "subject": {
        "type": "AuthenticatedUsers"
    },
    "condition": {
        "type": "SimpleTime",
        "startTime": "09:00",
        "endTime": "17:00",
        "startDay": "mon",
        "endDay": "fri",
        "enforcementTimeZone": "GMT"
    },
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resourceAttributes": [
        {
            "type": "User",
            "propertyName": "givenName",
            "propertyValues": [ ]
        }
    ],
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": "2015-05-11T17:39:09.393Z",
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": "2015-05-11T17:37:24.556Z"
}</programlisting>

  <variablelist>
   <para>
    The values for the fields shown in the example are explained below:
   </para>

   <varlistentry>
    <term><literal>"name"</literal></term>
    <listitem>
     <para>
      String matching the name
      in the URL used when creating the policy by HTTP PUT
      or in the body when creating the policy by HTTP POST.
     </para>


    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"active"</literal></term>
    <listitem>
     <para>
      Boolean indicating whether OpenAM considers the policy active
      for evaluation purposes, defaults to <literal>false</literal>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"description"</literal></term>
    <listitem>
     <para>
      String describing the policy.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"resources"</literal></term>
    <listitem>
     <para>
      List of the resource name pattern strings to which the policy applies.
      Must conform to the pattern templates provided by the associated
      <link linkend="rest-api-authz-resource-types">resource type</link>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"applicationName"</literal></term>
    <listitem>
     <para>
      String application name,
      such as <literal>"iPlanetAMWebAgentService"</literal>,
      <literal>"crestPolicyService"</literal>,
      or some other application name.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"actionValues"</literal></term>
    <listitem>
     <para>
      Set of string action names, each set to a boolean indicating whether the
      action is allowed. Chosen from the available actions provided by the
      associated <link linkend="rest-api-authz-resource-types">resource type</link>.
     </para>

     <tip><para>
      Action values can also be expressed as numeric values. When using
      numeric values, use the value <literal>0</literal> for
      <literal>false</literal> and use any non-zero numeric
      value for <literal>true</literal>.</para></tip>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"subject"</literal></term>
    <listitem>
     <para>
      Specifies the subject conditions to which the policy applies,
      where subjects can be combined by using the built-in types
      <literal>"AND"</literal>, <literal>"OR"</literal>,
      and <literal>"NOT"</literal>,
      and where subject implementations are pluggable.
     </para>

     <para>
      Subjects are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (using a short name for all registered subject implementations),
      and also other fields depending on the implementation.
      The subject types registered by default include the following:
     </para>

     <itemizedlist>
      <listitem>
       <para>
        <literal>"AuthenticatedUsers"</literal>,
        meaning any user that has successfully authenticated to OpenAM.
       </para>
       <programlisting language="javascript">{
    "type": "AuthenticatedUsers"
}       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"Identity"</literal>
        to specify one or more users from an OpenAM identity repository:
       </para>

       <programlisting language="javascript">{
   "type": "Identity",
   "subjectValues": [
       "uid=scarter,ou=People,dc=example,dc=com",
       "uid=ahall,ou=People,dc=example,dc=com"
   ]
}</programlisting>

       <para>
        You can also use the
        <literal>"Identity"</literal>
        subject type to specify one or more groups from an identity repository:
       </para>

       <programlisting language="javascript">{
    "type": "Identity",
    "subjectValues": [
        "cn=HR Managers,ou=Groups,dc=example,dc=com"
    ]
}</programlisting>

      </listitem>

      <listitem>
       <para>
        <literal>"JwtClaim"</literal>
        to specify a claim in a
        user's JSON web token (JWT).
       </para>
       <programlisting language="javascript">{
    "type": "JwtClaim",
    "claimName": "sub",
    "claimValue": "scarter"
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"NONE"</literal>,
        meaning never match any subject. The result is not that access is denied, but
        rather that the policy itself does not match and therefore cannot be
        evaluated in order to allow access.
       </para>
      </listitem>

     </itemizedlist>

     <para>
      The following example defines the subject
      either as the user Sam Carter from an OpenAM identity repository,
      or as a user with a JWT claim with a subject claim with the value
      scarter:
     </para>

     <programlisting language="javascript">"subject": {
    "type": "OR",
    "subjects": [
       {
           "type": "Identity",
           "subjectValues": [
               "uid=scarter,ou=People,dc=example,dc=com"
           ]
       },
       {
           "type": "JwtClaim",
           "claimName": "sub",
           "claimValue": "scarter"
       }
   ]
}</programlisting>

     <para>
      To read a single subject type description,
      or to list all the available subject types,
      see <xref linkend="rest-api-authz-subject-types" />.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"condition"</literal></term>
    <listitem>
     <para>
      Specifies environment conditions, where conditions can be combined
      by using the built-in types <literal>"AND"</literal>,
      <literal>"OR"</literal>, and <literal>"NOT"</literal>,
      and where condition implementations are pluggable.
     </para>

     <para>
      Conditions are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (using a short name for all registered condition implementations),
      and also other fields depending on the implementation.
      The condition types registered by default include the following.
     </para>

     <itemizedlist>

      <listitem>
      <para>
       <literal>"AMIdentityMembership"</literal>
       to specify a list of OpenAM users and groups.
      </para>
      <programlisting language="javascript">{
    "type": "AMIdentityMembership",
    "amIdentityName": [
        "id=scarter,ou=People,dc=example,dc=com"
    ]
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthLevel"</literal>
        to specify the authentication level.
       </para>
       <programlisting language="javascript">{
    "type": "AuthLevel",
    "authLevel": 2
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthScheme"</literal>
        to specify the authentication module used to authenticate and
        the application name, and to set a timeout for application
        authentication.
       </para>
       <programlisting language="javascript">{
    "type": "AuthScheme",
    "authScheme": [
        "DataStore"
    ],
    "applicationName": "iPlanetAMWebAgentService",
    "applicationIdleTimeout": 10
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthenticateToRealm"</literal>
        to specify the realm to which the user authenticated.
       </para>
       <programlisting language="javascript">{
    "type": "AuthenticateToRealm",
    "authenticateToRealm": "MyRealm"
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"AuthenticateToService"</literal>
        to specify the authentication chain that was used
        to authenticate.
       </para>
       <programlisting language="javascript">{
    "type": "AuthenticateToService",
    "authenticateToService": "MyAuthnChain"
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"IPv4"</literal>
        or
        <literal>"IPv6"</literal>
        to specify an IP address range from which
        the request originated.
       </para>
       <programlisting language="javascript">{
   "type": "IPv4",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}</programlisting>

       <para>
        You can also use the
        <literal>"IPv4"</literal>
        and
        <literal>"IPv6"</literal>
        conditions with the
        <literal>"dnsName"</literal>
        field to specify domain names from which the request originated. Omit
        <literal>"startIp"</literal>
        and
        <literal>"endIp"</literal>
        when using
        <literal>"dnsName"</literal>.
       </para>
       <programlisting language="javascript">{
    "type": "IPv4",
    "dnsName": [
        "*.example.com"
    ]
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"LDAPFilter"</literal>
        to specify an LDAP search filter. The user's entry is tested
        against the search filter in the directory configured in the
        Policy Configuration Service.
       </para>
       <programlisting language="javascript">{
    "type": "LDAPFilter",
    "ldapFilter": "(&amp;(c=US)(preferredLanguage=en-us))"
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"LEAuthLevel"</literal>
        to specify a maximum acceptable authentication level.
       </para>
       <programlisting language="javascript">
{
    "type": "LEAuthLevel",
    "authLevel": 2
}
       </programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"OAuth2Scope"</literal>
        to specify a list of attributes that
        must be present in the user profile.
       </para>
       <programlisting language="javascript">{
    "type": "OAuth2Scope",
    "requiredScopes": [
        "name",
        "address",
        "email"
    ]
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"ResourceEnvIP"</literal>
        to specify a complex condition such as whether the user is making a
        request from a given host and has authenticated with a given
        authentication level. For example:
       </para>
       <programlisting language="javascript">{
    "type": "ResourceEnvIP",
    "resourceEnvIPConditionValue": [
        "IF IP=[127.168.10.*] THEN authlevel=4"
    ]
}</programlisting>
       <para>
        Entries must take the form of one or more IF...ELSE statements.
        If the IF statement is true,
        the THEN statement must also be true for the condition to be fulfilled.
        The IF statement can specify either IP to match the user's IP address,
        or dnsName to match their DNS name.
        The IP address can be IPv4 or IPv6 format, or a hybrid of the two, and
        can include wildcard characters.
       </para>
       <para>
         The available parameters for the THEN statement are as follows:
       </para>

       <variablelist>
        <varlistentry>
         <term>
          <literal>module</literal>
         </term>
         <listitem>
          <para>
           The module that was used to authenticate the user,
           for example DataStore.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>service</literal>
         </term>
         <listitem>
          <para>
           The authentication chain that was used to authenticate the user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>authlevel</literal>
         </term>
         <listitem>
          <para>
           The minimum required authentication level.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>role</literal>
         </term>
         <listitem>
          <para>
           The role of the authenticated user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>user</literal>
         </term>
         <listitem>
          <para>
           The name of the authenticated user.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>redirectURL</literal>
         </term>
         <listitem>
          <para>
           The URL from which the user was redirected.
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term>
          <literal>realm</literal>
         </term>
         <listitem>
          <para>
           The realm to which the user authenticated.
          </para>
         </listitem>
        </varlistentry>

       </variablelist>

      </listitem>

      <listitem>
       <para>
        <literal>"Session"</literal>
        to specify how long the user's stateful or stateless session has been
        active, and to terminate the session if deemed too old,
        such that the user must authenticate again. Note that OpenAM terminates
        stateless sessions only if session blacklisting is in effect.
        See <link xlink:show="new"
                  xlink:href="admin-guide#session-state-session-termination"
                  xlink:role="http://docbook.org/xlink/role/olink">Session
        Termination</link> in the <citetitle>Administration Guide</citetitle>
        for more information about session blacklisting.
       </para>
       <programlisting language="javascript">{
    "type": "Session",
    "maxSessionTime": "10",
    "terminateSession": false
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"SessionProperty"</literal>
        to specify attributes set in the user's stateful or stateless session.
       </para>
       <programlisting language="javascript">{
    "type": "SessionProperty",
    "ignoreValueCase": true,
    "properties": {
        "CharSet": [
            "UTF-8"
        ],
        "clientType": [
            "genericHTML"
        ]
    }
}</programlisting>
      </listitem>

      <listitem>
       <para>
        <literal>"SimpleTime"</literal>
        to specify a time range, where
        <literal>"type"</literal>
        is the only required field.
       </para>

       <programlisting language="javascript">{
    "type": "SimpleTime",
    "startTime": "07:00",
    "endTime": "19:00",
    "startDay": "mon",
    "endDay": "fri",
    "startDate": "2015:01:01",
    "endDate": "2015:12:31",
    "enforcementTimeZone": "GMT+0:00"
}</programlisting>
      </listitem>
     </itemizedlist>

     <para>
      The following example defines the condition as
      neither Saturday or Sunday, nor certain client IP addresses.
     </para>
     <programlisting language="javascript">{
    "type": "NOT",
    "condition": {
        "type": "OR",
        "conditions": [
            {
                "type": "SimpleTime",
                "startDay": "sat",
                "endDay": "sun",
                "enforcementTimeZone": "GMT+8:00"
            },
            {
                "type": "IPv4",
                "startIp": "192.168.0.1",
                "endIp": "192.168.0.255"
            }
        ]
    }
}</programlisting>

      <para>
       To read a single condition type description,
       or to list all the available condition types,
       see <xref linkend="rest-api-authz-condition-types" />.
      </para>
     </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>"resourceTypeUuid"</literal></term>
     <listitem>
      <para>The UUIDs of the resource type associated with the policy.</para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><literal>"resourceAttributes"</literal></term>
    <listitem>
     <para>
      List of attributes to return with decisions. These attributes
      are known as <firstterm>response attributes</firstterm>.
     </para>

     <para>The response attribute provider is pluggable.
      The default implementation provides
      for statically defined attributes
      and for attributes retrieved from user profiles.
     </para>

     <para>
      Attributes are shown as JSON objects
      with <literal>"type"</literal> set to the name of the implementation
      (by default either
      <literal>"Static"</literal> for statically defined attributes
      or <literal>"User"</literal> for attributes from the user profile),
      <literal>"propertyName"</literal> set to the attribute names.
      For static attributes, <literal>"propertyValues"</literal>
      holds the attribute values.
      For user attributes, <literal>"propertyValues"</literal>
      is not used; the property values are determined at evaluation time.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"createdBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      created the policy.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"creationDate"</literal></term>
    <listitem>
     <para>
      An integer containing the creation date and time, in number of seconds
      since the Unix epoch (1970-01-01T00:00:00Z).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>"lastModifiedBy"</literal></term>
    <listitem>
     <para>
      A string containing the universal identifier DN of the subject that
      most recently updated the policy.
     </para>
     <para>If the policy has not been modified since it was
      created, this will be the same value as
      <literal>createdBy</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>"lastModifiedDate"</literal></term>
    <listitem>
     <para>
      An integer containing the last modified date and time, in number of
      seconds since the Unix epoch (1970-01-01T00:00:00Z).
     </para>
     <para>If the policy has not been modified since it was
      created, this will be the same value as <literal>creationDate</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

    <section xml:id="rest-api-authz-policies-query">
   <title>Querying Policies</title>

     <para>
    To list all the policies in a realm, perform an HTTP GET to the
    <literal>/json{<replaceable>/realm</replaceable>}/policies</literal>
    endpoint, with a <literal>_queryFilter</literal> parameter
    set to <literal>true</literal>.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM returns
    policies in the top level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 https://openam.example.com:8443/openam/json/myrealm/policies?_queryFilter=true</userinput>
<computeroutput>{
    "result": [
        {
        "name": "example",
        "active": true,
        "description": "Example Policy",
        "applicationName": "iPlanetAMWebAgentService",
        "actionValues": {
            "POST": false,
            "GET": true
        },
        "resources": [
            "http://www.example.com:80/*",
            "http://www.example.com:80/*?*"
        ],
        "subject": {
            "type": "Identity",
            "subjectValues": [
                "uid=demo,ou=People,dc=example,dc=com"
            ]
        },
        "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
        "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "lastModifiedDate": "2015-05-11T14:48:08.711Z",
        "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "creationDate": "2015-05-11T14:48:08.711Z"
        }
    ],
    "resultCount": 1,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput></screen>

      <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>

   <table>
    <title>Supported <literal>_queryFilter</literal> Fields and
     Operators</title>
    <tgroup cols="2">
    <thead>
     <row>
      <entry>Field</entry>
      <entry>Supported Operators</entry>
     </row></thead>
    <tbody>
     <row>
      <entry><para><literal>name</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>description</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>applicationName</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>createdBy</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>creationDate</literal></para></entry>
      <entry>
       <para>
        Equals (<literal>eq</literal>),
        Greater than or equal to (<literal>ge</literal>),
        Greater than (<literal>gt</literal>),
        Less than or equal to (<literal>le</literal>),
        Less than (<literal>lt</literal>)
       </para>
      <note><para>The implementation of <literal>eq</literal> for this date
       field does not use regular expression pattern matching.</para></note></entry>
     </row>
     <row>
      <entry><para><literal>lastModifiedBy</literal></para></entry>
      <entry><para>Equals (<literal>eq</literal>)</para></entry>
     </row>
     <row>
      <entry><para><literal>lastModifiedDate</literal></para></entry>
      <entry><para>
        Equals (<literal>eq</literal>),
        Greater than or equal to (<literal>ge</literal>),
        Greater than (<literal>gt</literal>),
        Less than or equal to (<literal>le</literal>),
        Less than (<literal>lt</literal>)
       </para>
      <note><para>The implementation of <literal>eq</literal> for this date
       field does not use regular expression pattern matching.</para></note></entry>
     </row>
    </tbody>
    </tgroup>
   </table>
  </section>

    <section xml:id="rest-api-authz-policies-read">
   <title>Reading a Specific Policy</title>

    <para>
    To read an individual policy in a realm, perform an HTTP
    GET to the <literal>/json{<replaceable>/realm</replaceable>}/policies
   </literal> endpoint, and specify the policy name in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/policies/example
</userinput>
<computeroutput>{
    "result": [
        {
        "name": "example",
        "active": true,
        "description": "Example Policy",
        "applicationName": "iPlanetAMWebAgentService",
        "actionValues": {
            "POST": false,
            "GET": true
        },
        "resources": [
            "http://www.example.com:80/*",
            "http://www.example.com:80/*?*"
        ],
        "subject": {
            "type": "Identity",
            "subjectValues": [
                "uid=demo,ou=People,dc=example,dc=com"
            ]
        },
        "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
        "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "lastModifiedDate": "2015-05-11T14:48:08.711Z",
        "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
        "creationDate": "2015-05-11T14:48:08.711Z"
        }
    ],
    "resultCount": 1,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput></screen>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policies-create">
   <title>Creating Policies</title>

   <para>
    To create a policy in a realm, perform an HTTP POST to the
    <literal>/json{<replaceable>/realm</replaceable>}/policies</literal>
    endpoint, with an <literal>_action</literal> parameter
    set to <literal>create</literal>. Include a JSON representation of the
    policy in the POST data.
   </para>

   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>

      <screen>
$ <userinput>curl \
 --request POST \
 --header "iPlanetDirectoryPro: AQIC5..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "mypolicy",
    "active": true,
    "description": "My Policy.",
    "applicationName": "iPlanetAMWebAgentService",
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=demo,ou=People,dc=example,dc=com"
        ]
    },
    "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4"
 }' \
 https://openam.example.com:8443/openam/json/policies?_action=create
      </userinput>
<computeroutput>{
    "name": "mypolicy",
    "active": true,
    "description": "My Policy.",
    "applicationName": "iPlanetAMWebAgentService",
    "actionValues": {
        "POST": false,
        "GET": true
    },
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=demo,ou=People,dc=example,dc=com"
        ]
    },
    "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": "2015-05-11T14:48:08.711Z",
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": "2015-05-11T14:48:08.711Z"
}</computeroutput></screen>
      <para>
       You can use the query string parameters
       <literal>_prettyPrint=true</literal> to make the output easier to read,
       and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
       to limit the fields returned in the output.
      </para>

     </section>



  <section xml:id="rest-api-authz-policies-update">
   <title>Updating Policies</title>

   <para>
    To update an individual policy in a realm, perform an HTTP
    PUT to the <literal>/json{<replaceable>/realm</replaceable>}/policies
   </literal> endpoint, and specify the policy name in the URL. Include a
    JSON representation of the updated application in the PUT data.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <xinclude:include href="../shared/para-special-characters.xml">
       <xinclude:fallback>
           Failed to include para-special-characters
       </xinclude:fallback>
   </xinclude:include>

   <screen>
$ <userinput>curl \
 --request PUT \
 --header "iPlanetDirectoryPro: AQIC5w..." \
 --header "Content-Type: application/json" \
 --data '{
    "name": "myupdatedpolicy",
    "active": true,
    "description": "My Updated Policy.",
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "actionValues": {
        "POST": true,
        "GET": true
    },
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=scarter,ou=People,dc=example,dc=com",
            "uid=bjenson,ou=People,dc=example,dc=com"
        ]
    },
    "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4"
}' \
 https://openam.example.com:8443/openam/json/policies/mypolicy
</userinput>
<computeroutput>{
    "name": "myupdatedpolicy",
    "active": true,
    "description": "My Updated Policy.",
    "applicationName": "iPlanetAMWebAgentService",
    "actionValues": {
        "POST": true,
        "GET": true
    },
    "resources": [
        "http://www.example.com:80/*",
        "http://www.example.com:80/*?*"
    ],
    "subject": {
        "type": "Identity",
        "subjectValues": [
            "uid=bjenson,ou=People,dc=example,dc=com",
            "uid=scarter,ou=People,dc=example,dc=com"
        ]
    },
    "resourceTypeUuid": "12345a67-8f0b-123c-45de-6fab78cd01e4",
    "lastModifiedBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "lastModifiedDate": "2015-05-11T17:26:59.116Z",
    "createdBy": "id=amadmin,ou=user,dc=openam,dc=forgerock,dc=org",
    "creationDate": "2015-05-11T17:25:18.632Z"
}</computeroutput></screen>

   <para>
    You can use the query string parameters
    <literal>_prettyPrint=true</literal> to make the output easier to read,
    and <literal>_fields=<replaceable>field-name</replaceable>[,<replaceable>field-name</replaceable>...]</literal>
    to limit the fields returned in the output.
   </para>
  </section>

  <section xml:id="rest-api-authz-policies-delete">
   <title>Deleting Policies</title>

   <para>
    To delete an individual policy in a realm, perform an HTTP
    DELETE to the <literal>/json{<replaceable>/realm</replaceable>}/policies
   </literal> endpoint, and specify the policy name in the URL.
   </para>
   <note><para>If the realm is not specified in the URL, OpenAM uses the top
    level realm.</para></note>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
$ <userinput>curl \
  --header "iPlanetDirectoryPro: AQIC5w..." \
  --request DELETE \
  https://openam.example.com:8443/openam/json/policies/myupdatedpolicy</userinput>
<computeroutput>{}</computeroutput></screen>
  </section>


 </section>

 <section xml:id="rest-api-manage-xacml">
  <title>Importing and Exporting XACML 3.0</title>

  <para>
   OpenAM supports the ability to export policies to
   eXtensible Access Control Markup Language (XACML) 3.0-based
   formatted policy sets
   through its <literal>/xacml/policies</literal> REST endpoint.
   You can also import XACML 3.0 policy sets back into OpenAM by using the
   same endpoint.
   The endpoint's functionally is identical to that of the
   <!--  Update when AME-4741 -->
   <literal>ssoadm</literal> <literal>import-xacml</literal> and
   <literal>export-xacml</literal> commands.
   For more information, see
   <link xlink:show="new" xlink:href="admin-guide#script-policy"
         xlink:role="http://docbook.org/xlink/role/olink">Importing and Exporting Policies</link>
  </para>

  <note>
   <para>
   OpenAM can only import XACML 3.0 policy sets that were either created by an
   OpenAM instance, or that have had minor manual modifications,
   due to the reuse of some XACML 3.0 parameters for non-standard information.
   </para>
  </note>

  <para>
   When exporting OpenAM policies to XACML 3.0 policy sets, OpenAM maps its
   policies to XACML 3.0 policy elements. The
   mappings are as follows:
  </para>

  <!-- Consider a new table format -->
  <table xml:id="xacml-mappings">
   <title>OpenAM Policies to XACML Mappings</title>
   <tgroup cols="2">
    <colspec colnum="1" colwidth="1*"/>
    <colspec colnum="2" colwidth="1*"/>
    <thead>
     <row>
      <entry>OpenAM Policy</entry>
      <entry>XACML Policy</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Policy Name</entry>
      <entry>Policy ID</entry>
     </row>
     <row>
      <entry>Description</entry>
      <entry>Description</entry>
     </row>
     <row>
      <entry>Current Time (yyyy.MM.dd.HH.mm.ss.SSS)</entry>
      <entry>Version</entry>
     </row>
     <row>
      <entry>xacml rule target</entry>
      <entry>entitlement excluded resource names</entry>
     </row>
     <row>
      <entry>Rule Deny Overrides</entry>
      <entry>Rule Combining Algorithm ID</entry>
     </row>
     <row>
      <entry>
       <para>Any of:
        <itemizedlist>
         <listitem>
          <para>Entitlement Subject</para>
         </listitem>
         <listitem>
          <para>Resource Names</para>
         </listitem>
         <listitem>
          <para>Application Names</para>
         </listitem>
         <listitem>
          <para>Action Values</para>
         </listitem>
        </itemizedlist>
       </para>
      </entry>
      <entry>Target</entry>
     </row>
     <row>
      <entry>
       <para>Any of:
        <itemizedlist>
        <listitem>
         <para>Application Name</para>
        </listitem>
        <listitem>
         <para>Entitlement Name</para>
        </listitem>
        <listitem>
         <para>Privilege Created By</para>
        </listitem>
        <listitem>
         <para>Privilege Modified By</para>
        </listitem>
        <listitem>
         <para>Privilege Creation Date</para>
        </listitem>
        <listitem>
         <para>Privilege Last Modification Date</para>
        </listitem>
       </itemizedlist>
       </para>
      </entry>
      <entry>Variable Definitions</entry>
     </row>
     <row>
      <entry>
       Single Level Permit/Deny Actions converted
       to Policy Rules
      </entry>
      <entry>Rules</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    XACML obligation is not supported. Also, only one XACML match is defined for
    each privilege action, and only one XACML rule for each privilege action value.
   </para>
  </note>

  <section xml:id="xacml-export">
   <title>Exporting from OpenAM to XACML</title>
   <para>
    OpenAM supports exporting policies into XACML 3.0 format.

    OpenAM only exports a policy set that contains policy definitions. No other
    types can be included in the policy set, such as sub-policy sets or rules.
    The policy set mapping is as follows:
   </para>

   <table xml:id="xacml-export-mappings">
    <title>Policy Set Mappings</title>
    <tgroup cols="2">
     <colspec colnum="1" colwidth="1*"/>
     <colspec colnum="2" colwidth="2*"/>
     <thead>
      <row>
       <entry>OpenAM</entry>
       <entry>XACML</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Realm:&lt;timestamp>(yyyy.MM.dd.HH.mm.ss.SSS)</entry>
       <entry>PolicySet ID</entry>
      </row>
      <row>
       <entry>Current Time (yyyy.MM.dd.HH.mm.ss.SSS)</entry>
       <entry>Version</entry>
      </row>
      <row>
       <entry>Deny Overrides</entry>
       <entry>Policy Combining Algorithm ID</entry>
      </row>
      <row>
       <entry>No targets defined</entry>
       <entry>Target</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    The export service is accessible at the <literal>/xacml/policies</literal>
    endpoint using a HTTP GET request
    at the following endpoint for the root realm or a specific realm:
   </para>

   <programlisting>
http://openam.example.com:8080/openam/xacml/policies
http://openam.example.com:8080/openam/xacml/{realm}/policies

  where {realm} is the name of a specific realm
   </programlisting>

   <para>
    You can filter your XACML exports using query search filters. Note the
    following points about the search filters:
   </para>

   <itemizedlist>
   <listitem>
    <para><emphasis role="bold">LDAP-based Searches</emphasis>.
     The search filters follow the standard
     guidelines for LDAP searches as they are applied to the
     entitlements index in the LDAP configuration backend, located at:
     <literal>ou=default,ou=OrganizationalConfig,ou=1.0,ou=sunEntitlementIndexes,
      ou=services,dc=openam,dc=forgerock,dc=org</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis role="bold">Search Filter Format</emphasis>. You can specify
     a single search filter or multiple filters in the HTTP URL parameters.
     The format for the search filter is as follows:
    </para>
    <programlisting>
[attribute name][operator][attribute value]
    </programlisting>
    <para>
     If you specify multiple search filters, they are logically ANDed: the
     search results meet the criteria specified in all the
     search filters.
    </para>

    <table xml:id="export-search-filter-format">
     <title>XACML Export Search Filter Format</title>
     <tgroup cols="2">
      <colspec colnum="1" colwidth="1*"/>
      <colspec colnum="2" colwidth="2*"/>
      <thead>
       <row>
        <entry>Element</entry>
        <entry>Description</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Attribute Name</entry>
        <entry>
         <para>
          The name of the attribute to be searched for. The only permissible
          values are: <literal>application</literal>, <literal>createdby</literal>,
          <literal>lastmodifiedby</literal>, <literal>creationdate</literal>,
          <literal>lastmodifieddate</literal>, <literal>name</literal>,
          <literal>description</literal>.
         </para>
        </entry>
       </row>
       <row>
        <entry>Operator</entry>
        <entry>
         <para>The type of comparison operation to perform.</para>
         <itemizedlist>
          <listitem>
           <para>= Equals (text)</para>
          </listitem>
          <listitem>
           <para>&lt; Less Than or Equal To (numerical)</para>
          </listitem>
          <listitem>
           <para>&gt; Greater Than or Equal To (numerical)</para>
          </listitem>
         </itemizedlist>
        </entry>
       </row>
       <row>
        <entry>Attribute Value</entry>
        <entry>
         <para>
          The matching value. Asterisk wildcards are supported.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   </listitem>
  </itemizedlist>

   <procedure xml:id="export-policies">
   <title>To Export Policies</title>

   <step>
    <para>
     Use the <literal>/xacml/policies</literal> endpoint to export the OpenAM entitlement
     policies into XACML 3.0 format. The following curl command exports the policies
     and returns the XACML response (truncated for display purposes).
    </para>
   <screen>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies
  </userinput>
  <computeroutput>
&lt;&#63;xml version="1.0" encoding="UTF-8" standalone="yes"&#63;>
&lt;PolicySet xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
 PolicyCombiningAlgId="urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides"
 Version="2014.10.08.21.59.39.231" PolicySetId="/:2014.10.08.21.59.39.231">
 &lt;Target/>
 &lt;Policy RuleCombiningAlgId="urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-overrides"
  Version="2014.10.08.18.01.03.626"
  PolicyId="Rockshop_Checkout_https://forgerock-rockshop.openrock.org:443/wp-login.php*&#63;*">
  ...</computeroutput>
    </screen>
   </step>
  </procedure>

   <procedure xml:id="export-policies-search-filter">
   <title>To Export Policies with Search Filters</title>
   <step>
    <para>
     Use the <literal>/xacml/policies</literal> endpoint to export the policies
     into XACML 3.0 format with a search filter. This command only exports policies
     that were created by "amadmin".
    </para>
    <screen>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies&#63;filter=createdby=amadmin
  </userinput>
   </screen>
   </step>
   <step>
    <para>
     You can also specify more than one search filter by logically ANDing the filters
     as follows:
    </para>
    <screen>
$ <userinput>curl \
  --request GET \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/json" \
  http://openam.example.com:8080/openam/xacml/policies&#63;filter=createdby=amadmin&#38;
  filter=creationdate=135563832</userinput>
    </screen>
    </step>
   </procedure>
  </section>

  <section xml:id="xacml-import">
   <title>Importing from XACML to OpenAM</title>

   <para>
    OpenAM supports the import of XACML 3.0-based policy sets into
    OpenAM policies using the REST <literal>/xacml/policies</literal>
    endpoint.
    To test an import, OpenAM provides a dry-run feature that runs an import
    without saving the changes to the database. The dry-run feature provides a
    summary of the import so that you can troubleshoot any potential mismatches
    prior to the actual import.
   </para>
   <para>
    You can import a XACML policy using an HTTP POST request for the root realm
    or a specific realm at the following endpoints:
   </para>

   <programlisting>
http://openam.example.com:8080/openam/xacml/policies
http://openam.example.com:8080/openam/xacml/{realm}/policies

where {realm} is the name of a specific realm
   </programlisting>

   <procedure xml:id="procedure-xacml-import">
    <title>To Import a XACML 3.0 Policy</title>
    <step>
     <para>You can do a dry run using the <literal>dryrun=true</literal> query to
      test the import. The dry-run option outputs in JSON format and displays the status
      of each import policy, where "U" indicates "Updated"; "A" for "Added". The
      dry-run does not actually update to the database. When you are ready for an
      actual import, you need to re-run the command
      without the <literal>dryrun=true</literal> query.
     </para>
     <screen>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/policies?dryrun=true</userinput>
<computeroutput>[
 {
   "status":"U",
   "name":"testHelpDeskreferralpolicy"
 },
 {
   "status":"U",
   "name":"test_Referral"
 },
 {
   "status":"U",
   "name":"testexternalreferralpolicy"
 },
 {
   "status":"U",
   "name":"testregexternalreferralpolicy"
 }
]</computeroutput>
     </screen>
    </step>
    <step>
     <para>
Use the <literal>/xacml/policies</literal> endpoint to import a XACML policy:
     </para>
     <screen>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/policies</userinput>
     </screen>
    </step>
   </procedure>
   <tip>
     <para>You can import a XACML policy into a realm as follows:</para>
     <screen>
$ <userinput>curl \
  --request POST \
  --header "iPlanetDirectoryPro: AQIC5..." \
  --header "Content-Type: application/xml" \
  --data @xacml-policy.xml
  http://openam.example.com:8080/openam/xacml/{realm}/policies</userinput>
     </screen>
   </tip>

  </section>

 </section>

 <section xml:id="rest-api-authz-condition-types">
  <title>Managing Environment Condition Types</title>

  <para>
   Environment condition types describe the JSON representation
   of environment conditions that you can use in policy definitions.
  </para>

  <itemizedlist>
   <para>OpenAM provides the <literal>conditiontypes</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-condition-types-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-condition-types-read" /></para>
   </listitem>
  </itemizedlist>

  <para>
   Environment condition types are server-wide, and do not differ by realm.
   Hence the URI for the condition types API does not contain a realm component,
   but is <literal>/json/conditiontypes</literal>.
  </para>

    <para>
   Environment condition types are represented in JSON and take the following form.
   Environment condition types are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

<programlisting>{
    "title": "IPv4",
    "logical": false,
    "config": {
        "type": "object",
        "properties": {
            "startIp": {
                "type": "string"
            },
            "endIp": {
                "type": "string"
            },
            "dnsName": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        }
    }
}</programlisting>

     <para>
    Notice that the environment condition type has a title, a "logical" field
    that indicates whether the type is a logical operator or takes a predicate,
    and a configuration specification.
    The configuration specification in this case indicates
    that an IPv4 environment condition has two properties, "startIp" and "endIp",
    that each take a single string value, and a third property, "dnsName," that
    takes an array of string values.
    In other words, a concrete IP environment condition specification
    without a DNS name constraint
    could be represented in a policy definition as in the following example:
   </para>

   <programlisting language="javascript">{
   "type": "IPv4",
   "startIp": "127.0.0.1",
   "endIp": "127.0.0.255"
}</programlisting>

   <para>
    The configuration is what differs the most across environment condition types.
    The NOT condition, for example, takes a single condition object
    as the body of its configuration.
   </para>

<programlisting>{
  "title" : "NOT",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "condition" : {
        "type" : "object",
        "properties" : {
        }
      }
    }
  }
}</programlisting>

   <para>
    The concrete NOT condition therefore takes the following form.
   </para>

   <programlisting language="javascript">{
    "type": "NOT",
    "condition": {
        ...
    }
}</programlisting>

   <para>
    The OR condition takes an array of conditions.
   </para>

<programlisting>{
  "title" : "OR",
  "logical" : true,
  "config" : {
    "type" : "object",
    "properties" : {
      "conditions" : {
        "type" : "array",
        "items" : {
          "type" : "any"
        }
      }
    }
  }
}</programlisting>

   <para>
    A corresponding concrete OR condition thus takes the following form.
   </para>


   <programlisting language="javascript">{
    "type": "OR",
    "conditions": [
        {
            ...
        },
        {
            ...
        },
        ...
    ]
}</programlisting>



  <section xml:id="rest-api-authz-condition-types-query">
   <title>Querying Environment Condition Types</title>

   <para>
    To list all environment condition types, perform an HTTP GET to the
    <literal>/json/conditiontypes</literal> endpoint, with a
    <literal>_queryFilter</literal> parameter set to <literal>true</literal>.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes?_queryFilter=true</userinput>
<computeroutput>{
    "result" : [
        {
            "title": "IPv4",
            "logical": false,
            "config": {
                "type": "object",
                "properties": {
                    "startIp": {
                        "type": "string"
                    },
                    "endIp": {
                        "type": "string"
                    },
                    "dnsName": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        {
            "title": "NOT",
            "logical": true,
            "config": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "object",
                        "properties": { }
                    }
                }
            }
        },
        {...},
        {...},
        {...}
    ],
    "resultCount" : 18,
    "pagedResultsCookie" : null,
    "remainingPagedResults" : 0
}</computeroutput></screen>

   <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>
  </section>

  <section xml:id="rest-api-authz-condition-types-read">
   <title>Reading a Specific Environment Condition Type</title>

   <para>
    To read an individual environment condition type, perform an HTTP
    GET to the <literal>/json/conditiontypes</literal> endpoint, and specify
    the environment condition type name in the URL.
   </para>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/conditiontypes/IPv4</userinput>
<computeroutput>{
  "title" : "IPv4",
  "logical" : false,
  "config" : {
    "type" : "object",
    "properties" : {
      "startIp" : {
        "type" : "string"
      },
      "endIp" : {
        "type" : "string"
      },
      "dnsName" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    }
  }
}</computeroutput></screen>
  </section>


 </section>

 <section xml:id="rest-api-authz-subject-types">
  <title>Managing Subject Condition Types</title>

  <para>
   Subject condition types describe the JSON representation
   of subject conditions that you can use in policy definitions.
  </para>

  <itemizedlist>
   <para>OpenAM provides the <literal>subjecttypes</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-subject-types-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-subject-types-read" /></para>
   </listitem>
  </itemizedlist>

  <para>
   Environment condition types are server-wide, and do not differ by realm.
   Hence the URI for the condition types API does not contain a realm component,
   but is <literal>/json/subjecttypes</literal>.
  </para>

    <para>
   Subject condition types are represented in JSON and take the following form.
   Subject condition types are built from standard JSON objects and values
   (strings, numbers, objects, arrays, <literal>true</literal>,
   <literal>false</literal>, and <literal>null</literal>).
  </para>

<programlisting>{
    "title" : "Identity",
    "logical" : false,
    "config" : {
        "type" : "object",
        "properties" : {
            "subjectValues" : {
                "type" : "array",
                "items" : {
                    "type" : "string"
                }
            }
        }
    }
}</programlisting>

   <para>
    Notice that the subject type has a title, a "logical" field
    that indicates whether the type is a logical operator or takes a predicate,
    and a configuration specification.
    The configuration specification in this case indicates
    that an Identity subject condition has one property,
    "subjectValues", which takes an array of string values.
    In other words, a concrete Identity subject condition specification
    is represented in a policy definition as in the following example:
   </para>

   <programlisting>{
   "type": "Identity",
   "subjectValues": [
       "uid=scarter,ou=People,dc=example,dc=com"
   ]
}</programlisting>

   <para>
    The configuration is what differs the most across subject condition types.
    The AND condition, for example, takes an array of subject condition objects
    as the body of its configuration.
   </para>

<programlisting>{
    "title" : "AND",
    "logical" : true,
    "config" : {
        "type" : "object",
        "properties" : {
            "subjects" : {
                "type" : "array",
                "items" : {
                    "type" : "any"
                }
            }
        }
    }
}</programlisting>

   <para>
    The concrete AND subject condition therefore takes the following form.
   </para>

   <programlisting language="javascript">{
    "type": "AND",
    "subject": [
      {...},
      {...},
      {...},
      {...}
    ]
}</programlisting>

  <section xml:id="rest-api-authz-subject-types-query">
   <title>Querying Subject Condition Types</title>

   <para>
    To list all environment condition types, perform an HTTP GET to the
    <literal>/json/subjecttypes</literal> endpoint, with a
    <literal>_queryFilter</literal> parameter set to <literal>true</literal>.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>
$ <userinput>curl \
  --header "iPlanetDirectoryPro: AQIC5..." \
  https://openam.example.com:8443/openam/json/subjecttypes?_queryFilter=true</userinput>
<computeroutput>{
    "result" : [
        {
            "title": "JwtClaim",
            "logical": false,
            "config": {
                "type": "object",
                "properties": {
                    "claimName": {
                        "type": "string"
                    },
                    "claimValue": {
                        "type": "string"
                    }
                }
            }
        },
        {
            "title": "NOT",
            "logical": true,
            "config": {
                "type": "object",
                "properties": {
                    "subject": {
                        "type": "object",
                        "properties": { }
                    }
                }
            }
        },
        {...},
        {...},
        {...}
    ],
    "resultCount" : 5,
    "pagedResultsCookie" : null,
    "remainingPagedResults" : 0
}</computeroutput>
   </screen>

   <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>
  </section>

  <section xml:id="rest-api-authz-subject-types-read">
   <title>Reading a Specific Subject Condition Type</title>

   <para>
    To read an individual subject condition type, perform an HTTP
    GET to the <literal>/json/subjecttypes</literal> endpoint, and specify
    the subject condition type name in the URL.
   </para>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

   <screen>$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/subjecttypes/Identity</userinput>
<computeroutput>{
    "title" : "Identity",
    "logical" : false,
    "config" : {
        "type" : "object",
        "properties" : {
            "subjectValues" : {
                "type" : "array",
                "items" : {
                    "type" : "string"
                }
            }
        }
    }
}</computeroutput></screen>
  </section>


 </section>

 <section xml:id="rest-api-authz-subject-attributes">
  <title>Managing Subject Attributes</title>

  <para>
   When you define a policy subject condition, the condition can depend on values
   of subject attributes stored in a user's profile. The list of possible subject
   attributes that you can use depends on the LDAP User Attributes configured for
   the Identity data store where OpenAM looks up the user's profile.
  </para>

  <itemizedlist>
   <para>OpenAM provides the <literal>subjectattributes</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-subject-attributes-query" /></para>
   </listitem>
  </itemizedlist>

  <para>
   Subject attributes derive from the list of LDAP user attributes configured
   for the Identity data store. For more information, see
   <link xlink:show="new"
         xlink:href="admin-guide#config-data-store"
         xlink:role="http://docbook.org/xlink/role/olink">Configuring Data Stores</link>.

  </para>

   <section xml:id="rest-api-authz-subject-attributes-query">
   <title>Querying Subject Attributes</title>

   <para>
    To list all subject attributes, perform an HTTP GET to the
    <literal>/json/subjectattributes</literal> endpoint, with a
    <literal>_queryFilter</literal> parameter set to <literal>true</literal>.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

<screen>$ <userinput>curl \
--header "iPlanetDirectoryPro: AQIC5..." \
https://openam.example.com:8443/openam/json/subjectattributes/?_queryFilter=true</userinput>
<computeroutput>
{
    "result" : [
        "sunIdentityServerPPInformalName",
        "sunIdentityServerPPFacadeGreetSound",
        "uid",
        "manager",
        "sunIdentityServerPPCommonNameMN",
        "sunIdentityServerPPLegalIdentityGender",
        "preferredLocale",
        "...",
        "...",
        "..."
    ],
    "resultCount": 87,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput></screen>

  <para>
  Note that no pagination cookie is set and the subject attribute names are
  all returned as part of the "result" array.
  </para>
    </section>
 </section>

 <section xml:id="rest-api-authz-decision-combiners">
  <title>Managing Decision Combiners</title>

  <para>
   Decision combiners describe how to resolve policy decisions
   when multiple policies apply.
  </para>

    <itemizedlist>
   <para>OpenAM provides the <literal>decisioncombiners</literal> REST endpoint
    for the following:</para>
   <listitem>
    <para><xref linkend="rest-api-authz-decision-combiner-query" /></para>
   </listitem>
   <listitem>
    <para><xref linkend="rest-api-authz-decision-combiner-read" /></para>
   </listitem>
  </itemizedlist>

  <para>
   Decision combiners are server-wide, and do not differ by realm.
   Hence the URI for the condition types API
   does not contain a realm component,
   but is <literal>/json/decisioncombiners</literal>.
  </para>

  <section xml:id="rest-api-authz-decision-combiner-query">
   <title>Querying Decision Combiners</title>

   <para>
    To list all decision combiners, perform an HTTP GET to the
    <literal>/json/decisioncombiners</literal> endpoint, with a
    <literal>_queryFilter</literal> parameter set to <literal>true</literal>.
   </para>

   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

  <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners?_queryFilter=true</userinput>
<computeroutput>{
    "result": [
        {
            "title": "DenyOverride"
        }
    ],
    "resultCount": 1,
    "pagedResultsCookie": null,
    "remainingPagedResults": 0
}</computeroutput></screen>

   <para>
    Additional query strings can be specified to alter the returned results.
    For more information, see <xref linkend="rest-api-filter-sort-page" />.
   </para>
  </section>

   <section xml:id="rest-api-authz-decision-combiner-read">
   <title>Reading a Specific Decision Combiner</title>

  <para>
   To view an individual decision combiner, perform an HTTP GET on its resource.
  </para>

          <para>
    To read an individual decision combiner, perform an HTTP
    GET to the <literal>/json/decisioncombiners</literal> endpoint, and specify
    the decision combiner name in the URL.
   </para>
   <para>
    The <literal>iPlanetDirectoryPro</literal> header is required and should
    contain the SSO token of an Administrator user who has access to perform
    the operation.
   </para>

  <screen>
$ <userinput>curl \
 --header "iPlanetDirectoryPro: AQIC5..." \
 https://openam.example.com:8443/openam/json/decisioncombiners/DenyOverride</userinput>
<computeroutput>{
  "title" : "DenyOverride"
}</computeroutput></screen>
 </section>
  </section>

</section>
